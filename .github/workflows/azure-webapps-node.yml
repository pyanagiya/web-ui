# Simplified Next.js App Service CI/CD Pipeline
name: Deploy to Azure App Service

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: teios-ai-webui-iymm4la6qt4mo
  NODE_VERSION: '20.x'

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --silent

    - name: Build application
      run: npm run build
      env:
        CI: true
        NODE_ENV: production

    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy
        
        # Copy built files
        cp -r .next deploy/
        cp -r public deploy/ 2>/dev/null || true
        cp -r app deploy/ 2>/dev/null || true
        cp -r styles deploy/ 2>/dev/null || true
        
        # Copy essential files only
        cp package.json deploy/
        cp package-lock.json deploy/
        cp next.config.js deploy/
        cp server.js deploy/
        cp tailwind.config.js deploy/ 2>/dev/null || true
        cp postcss.config.js deploy/ 2>/dev/null || true
        
        # Skip unnecessary files (*.md, *.txt, docs, etc.)
        # These files are not needed for production deployment
        
        # Optimize package.json for production
        cd deploy
        node -e "
          const pkg = require('./package.json');
          // Remove devDependencies completely
          delete pkg.devDependencies;
          // Keep only essential scripts
          pkg.scripts = {
            start: pkg.scripts.start,
            build: pkg.scripts.build
          };
          // Remove unnecessary fields
          delete pkg.private;
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
        "
        
        # Install production dependencies only
        npm ci --production --silent --no-audit --no-fund
        
        # Clean up unnecessary files more aggressively
        find node_modules -name "*.md" -delete 2>/dev/null || true
        find node_modules -name "*.txt" -delete 2>/dev/null || true
        find node_modules -name "*.map" -delete 2>/dev/null || true
        find node_modules -name "*.d.ts" -delete 2>/dev/null || true
        find node_modules -name "*.ts" -delete 2>/dev/null || true
        find node_modules -name "CHANGELOG*" -delete 2>/dev/null || true
        find node_modules -name "LICENSE*" -delete 2>/dev/null || true
        find node_modules -name "README*" -delete 2>/dev/null || true
        find node_modules -name "HISTORY*" -delete 2>/dev/null || true
        find node_modules -name "*.coffee" -delete 2>/dev/null || true
        find node_modules -name "*.less" -delete 2>/dev/null || true
        find node_modules -name "*.scss" -delete 2>/dev/null || true
        find node_modules -name "*.sass" -delete 2>/dev/null || true
        find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "__tests__" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "docs" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "examples" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "example" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "coverage" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "benchmark" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name ".github" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "man" -type d -exec rm -rf {} + 2>/dev/null || true
        find node_modules -name "bin" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Remove specific heavy packages that aren't needed in production
        rm -rf node_modules/@types 2>/dev/null || true
        rm -rf node_modules/typescript 2>/dev/null || true
        rm -rf node_modules/eslint* 2>/dev/null || true
        rm -rf node_modules/prettier 2>/dev/null || true
        rm -rf node_modules/@babel 2>/dev/null || true
        rm -rf node_modules/webpack* 2>/dev/null || true
        rm -rf node_modules/@next/swc-* 2>/dev/null || true
        rm -rf node_modules/postcss 2>/dev/null || true
        rm -rf node_modules/autoprefixer 2>/dev/null || true
        rm -rf node_modules/tailwindcss 2>/dev/null || true
        
        # Show package size breakdown
        echo "üì¶ Package analysis:"
        echo "- Total size: $(du -sh . | cut -f1)"
        echo "- .next size: $(du -sh .next | cut -f1)"
        echo "- node_modules size: $(du -sh node_modules | cut -f1)"
        echo "- Top 10 largest directories:"
        du -sh node_modules/* 2>/dev/null | sort -rh | head -10 || echo "No modules found"
        
        cd ..
        echo "Package size: $(du -sh deploy/ | cut -f1)"

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Configure App Service
      run: |
        az webapp config appsettings set \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --resource-group "teios-ai-rg" \
          --settings \
            NODE_ENV=production \
            WEBSITES_PORT=8080 \
            WEBSITE_NODE_DEFAULT_VERSION=20.x \
            WEBSITE_RUN_FROM_PACKAGE=1
            
        az webapp config set \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --resource-group "teios-ai-rg" \
          --startup-file "node server.js"

    - name: Deploy to Azure
      run: |
        cd deploy
        
        # Create highly optimized zip
        echo "üì¶ Creating optimized deployment package..."
        zip -r9 ../deploy.zip . -x \
          "*.md" "*.txt" "*.log" "*.tmp" "*.orig" "*.bak" \
          "*.DS_Store" "*Thumbs.db" "*.coffee" "*.less" "*.scss" "*.sass" \
          "node_modules/*/README*" "node_modules/*/CHANGELOG*" \
          "node_modules/*/LICENSE*" "node_modules/*/HISTORY*" \
          "node_modules/*/AUTHORS*" "node_modules/*/CONTRIBUTORS*" \
          "node_modules/*/test/*" "node_modules/*/tests/*" \
          "node_modules/*/__tests__/*" "node_modules/*/docs/*" \
          "node_modules/*/examples/*" "node_modules/*/example/*" \
          "node_modules/*/coverage/*" "node_modules/*/benchmark/*" \
          "node_modules/*/.github/*" "node_modules/*/man/*" \
          -q
        
        cd ..
        
        # Show final package size
        echo "üìä Final package size: $(du -sh deploy.zip | cut -f1)"
        
        # Use newer az webapp deploy command instead of deprecated config-zip
        echo "üöÄ Starting deployment with az webapp deploy..."
        az webapp deploy \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --resource-group "teios-ai-rg" \
          --src-path deploy.zip \
          --type zip \
          --async false \
          --timeout 900

    - name: Health check
      run: |
        echo "Waiting for app to start..."
        sleep 90
        
        for i in {1..8}; do
          echo "Health check attempt $i/8"
          
          if curl -f -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health > /dev/null; then
            echo "‚úÖ App is running!"
            exit 0
          fi
          
          if [ $i -eq 8 ]; then
            echo "‚ùå Health check failed"
            az webapp log tail \
              --name "${{ env.AZURE_WEBAPP_NAME }}" \
              --resource-group "teios-ai-rg" \
              --provider application \
              --logs 30 || true
            exit 1
          fi
          
          sleep 30
        done

    - name: Logout from Azure
      run: az logout
      if: always()

    - name: Deployment summary
      run: |
        echo "üöÄ Deployment completed!"
        echo "üìç App URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
      if: success()
