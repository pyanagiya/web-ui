# Next.js App Service CI/CD „Éë„Ç§„Éó„É©„Ç§„É≥
# CI: „Åô„Åπ„Å¶„ÅÆ„Éñ„É©„É≥„ÉÅ„Åß„ÉÜ„Çπ„Éà„Éª„É™„É≥„ÉàÂÆüË°å
# CD: main„Éñ„É©„É≥„ÉÅ„Éû„Éº„Ç∏ÊôÇ„ÅÆ„Åø„Éá„Éó„É≠„Ç§ÂÆüË°å

name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: teios-ai-webui-iymm4la6qt4mo    # App ServiceÂêç
  AZURE_WEBAPP_PACKAGE_PATH: '.'                     # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„Éë„Çπ
  NODE_VERSION: '20.x'                              # Node.js„Éê„Éº„Ç∏„Éß„É≥ (App Service„Å´Âêà„Çè„Åõ„Å¶20.x)

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write  # OIDCÁî®„Å´ÂøÖË¶Å

jobs:
  # CI Job - „Åô„Åπ„Å¶„ÅÆ„Éñ„É©„É≥„ÉÅ„ÅßÂÆüË°å
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Check code formatting with Prettier
      run: |
        if [ -f ".prettierrc" ]; then
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
        else
          echo "Prettier not configured, skipping format check"
        fi
      continue-on-error: true

    - name: Run ESLint
      run: |
        npm run lint

    - name: Type check with TypeScript
      run: |
        npx tsc --noEmit --skipLibCheck
      continue-on-error: true

    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping test step"
        fi
      continue-on-error: true

    - name: Security audit
      run: |
        npm audit --audit-level moderate
      continue-on-error: true

    - name: Check for outdated dependencies
      run: |
        npm outdated || true

    - name: Run bundle analyzer (if available)
      run: |
        if grep -q '"analyze"' package.json; then
          npm run analyze
        else
          echo "Bundle analyzer not configured, skipping"
        fi
      continue-on-error: true

    - name: Build application (CI check)
      run: |
        npm run build
      env:
        CI: true
        NODE_ENV: production

  # Build Job - main„Éñ„É©„É≥„ÉÅ„ÅÆ„Åø„ÅßÂÆüË°å
  build:
    name: Build for Production
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Build application
      run: |
        npm run build
      env:
        CI: true
        NODE_ENV: production

    - name: Create deployment package
      run: |
        # Create a clean deployment directory
        mkdir -p deploy
        
        # Copy built application
        cp -r .next deploy/
        
        # Copy required directories if they exist
        if [ -d "public" ]; then cp -r public deploy/; fi
        if [ -d "styles" ]; then cp -r styles deploy/; fi
        if [ -d "app" ]; then cp -r app deploy/; fi
        
        # Copy essential files
        cp package.json deploy/
        cp package-lock.json deploy/
        cp next.config.js deploy/
        cp server.js deploy/
        
        # Copy other necessary files if they exist
        if [ -f "tsconfig.json" ]; then cp tsconfig.json deploy/; fi
        if [ -f "tailwind.config.js" ]; then cp tailwind.config.js deploy/; fi
        if [ -f "postcss.config.js" ]; then cp postcss.config.js deploy/; fi
        
        # Install production dependencies in the deployment package
        cd deploy
        npm ci --only=production
        cd ..
        
        # List deployment contents for verification
        echo "Deployment package contents:"
        ls -la deploy/

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app-${{ github.sha }}
        path: deploy/
        retention-days: 30

  # Deploy Job - main„Éñ„É©„É≥„ÉÅ„ÅÆ„Åø„ÅßÂÆüË°å
  deploy:
    name: Deploy to Production
    permissions:
      contents: read
      id-token: write  # OIDCÁî®„Å´ÂøÖË¶Å
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app-${{ github.sha }}

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Configure App Service settings
      run: |
        az webapp config appsettings set \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --resource-group "teios-ai-rg" \
          --settings \
            NODE_ENV=production \
            WEBSITES_PORT=8080 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            WEBSITE_NODE_DEFAULT_VERSION=20.x

    - name: Configure startup command
      run: |
        az webapp config set \
          --name "${{ env.AZURE_WEBAPP_NAME }}" \
          --resource-group "teios-ai-rg" \
          --startup-file "npm start"

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'Production'
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Health check after deployment
      run: |
        sleep 30
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || echo "Health check failed"
      continue-on-error: true

    - name: Logout from Azure
      run: |
        az logout
      if: always()

    - name: Deployment summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üìç App URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "üîó Deployment URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
        echo "üìä Commit: ${{ github.sha }}"
        echo "üë§ Author: ${{ github.actor }}"
